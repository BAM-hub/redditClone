generator client {
  provider = "prisma-client-js"
  // previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
  // referentialIntegrity = "prisma"
}

// typeScript types
enum Gender {
  Male
  Female
}

enum PostType {
  Text
  Link
  Image
  Pool
}

enum TagType {
  OC
  Spoiler
  NSFW
}

// User
model User {
  id              Int               @id @default(autoincrement())
  email           String            @unique
  name            String            @unique
  birthday        DateTime
  gender          Gender            @default(Male)
  country         String?
  date            DateTime?         @default(now())
  profile         Profile?
  posts           Post[]
  comments        Comment[]
  messages        Message[]
  ChatOnUser      ChatOnUser[]
  UserToCommunity UserToCommunity[]
}

// Profile
model Profile {
  id       Int               @id @default(autoincrement())
  trophy   ProfileOnTrophy[]
  userId   Int               @unique
  Trophies User              @relation(fields: userId, references: id)
}

// Trophy
model Trophy {
  id       Int               @id @default(autoincrement())
  name     String
  profiles ProfileOnTrophy[]
}

// ProfileOnTrophy Relation
model ProfileOnTrophy {
  profile    Profile  @relation(fields: [profileId], references: [id])
  profileId  Int
  trophy     Trophy   @relation(fields: [trophyId], references: [id])
  trophyId   Int
  assignedAt DateTime @default(now())
  assignedBy String

  @@id([profileId, trophyId])
}

// post
model Post {
  id           Int       @id @default(autoincrement())
  comunityId   Int?      @unique
  userId       Int       @unique
  title        String
  type         PostType  @default(Text)
  text         String?
  link         String?
  image        String?
  pool         Pool?
  notification Boolean   @default(true)
  published    Boolean   @default(false)
  publishedAt  DateTime?

  user     User        @relation(fields: userId, references: id)
  tags     TagOnPost[]
  comments Comment[]
}

// Pool
model Pool {
  id         Int          @id @default(autoincrement())
  endsAt     DateTime
  startAt    DateTime?    @default(now())
  postId     Int          @unique
  Post       Post         @relation(fields: postId, references: id)
  PoolOption PoolOption[]
}

// PoolOption
model PoolOption {
  id     Int    @id @default(autoincrement())
  poolId Int    @unique
  pool   Pool   @relation(fields: poolId, references: id)
  text   String
  votes  Int    @default(0)
}

// TagOnPost Relation
model TagOnPost {
  tag    Tag     @relation(fields: [tagId], references: [id])
  tagId  Int
  post   Post    @relation(fields: [postId], references: [id])
  postId Int
  type   TagType

  @@id([tagId, postId])
}

// Tag
model Tag {
  id    Int         @id @default(autoincrement())
  tag   TagType
  posts TagOnPost[]
}

// Comment
model Comment {
  id        Int      @id @default(autoincrement())
  postId    Int      @unique
  Post      Post     @relation(fields: postId, references: id)
  userId    Int      @unique
  User      User     @relation(fields: userId, references: id)
  text      String
  createdAt DateTime @default(now())
}

// Chat
model Chat {
  id         Int          @id @default(autoincrement())
  createdAt  DateTime     @default(now())
  messages   Message[]
  ChatOnUser ChatOnUser[]
}

model Message {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  chatId    Int      @unique
  chat      Chat     @relation(fields: chatId, references: id)
  userId    Int      @unique
  user      User     @relation(fields: userId, references: id)
  text      String
  sender    String
}

// ChatOnUser Relation
model ChatOnUser {
  chat   Chat @relation(fields: [chatId], references: [id])
  chatId Int
  user   User @relation(fields: [userId], references: [id])
  userId Int

  @@id([chatId, userId])
}

// Community
model Community {
  id              Int               @id @default(autoincrement())
  name            String            @unique
  title           String
  image           String?
  coverImsge      String?
  createdAt       DateTime          @default(now())
  pinnedPostId    Int               @unique
  UserToCommunity UserToCommunity[]
}

//UserToCommunity relation
model UserToCommunity {
  user        User      @relation(fields: [userId], references: [id])
  userId      Int
  community   Community @relation(fields: [communityId], references: [id])
  communityId Int

  @@id([userId, communityId])
}
